body {
    font-family: "lato", sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: $color-grey-dark;
}

.heading-primary {
    color: white;
    text-transform: uppercase;

    /* Prevent the animation from being shaky at the end (slight shift up) (Hack to fix it) */
    /* Normally used if an element is flipped 180 degrees and you want to hide it */
    backface-visibility: hidden;

    margin-bottom: 6rem;

    &--main {
        /* Block display allows occupy the entire width available and create line breaks before/after them */
        display: block;
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 3.5rem;

        @include respond(phone) {
            letter-spacing: 1rem;
            font-size: 5rem;
        }
    
        animation-name: moveInLeft;
        animation-duration: 1s;
    
        /* Ease out: start fast, end slow */
        animation-timing-function: ease-out;
    
        /* Repeat animation 3 times */
        /* animation-iteration-count: 3; */
    
        /* Delay in starting the animation */
        /* animation-delay: 3s; */
    }
    
    &--sub {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.75rem;

        @include respond(phone) {
            letter-spacing: .5rem;
        }
    
        animation: moveInRight 1s ease-out;
    }
}

.heading-secondary {
    font-size: 3.5rem;
    text-transform: uppercase;
    font-weight: 700;

    // Inline block makes the background gradient stop when the text stops 
    // (rather than going to the end of the page).
    display: inline-block;
    background-image: linear-gradient(to right, $color-primary-light, $color-primary-dark);

    // The background gets clipped exactly where the text is
    background-clip: text;
    -webkit-background-clip: text;

    // Make the text transparent so we can see the background image (gradient)
    color: transparent;

    // Fixed letter spacing is fine (no need to use rems).
    letter-spacing: 2px;

    // Transition for hover to create skew effect
    transition: all .2s;

    @include respond(tab-port) {
        font-size: 3rem;
    }

    @include respond(phone) {
        font-size: 2.5;
    }

    &:hover {
        transform: skewX(2deg) skewY(15deg) scale(1.1);
        text-shadow: .5rem 1rem 2rem rgba(black, .2);
    }
}

.heading-tertiary {
    font-size:  $default-font-size;
    font-weight: 700;
    text-transform: uppercase;
}

.paragraph {
    font-size: $default-font-size;

    // Last paragraph will not get the margin
    &:not(:last-child) {
        margin-bottom: 3rem;
    }
    
}